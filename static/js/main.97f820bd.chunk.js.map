{"version":3,"sources":["components/Buttons/Button.tsx","redux/hooks.ts","redux/animalsSlice.ts","components/FormModals/AnimalFormModal.tsx","components/AnimalCards/AnimalCard.tsx","pages/Home/Home.tsx","redux/languageSlice.ts","components/FormModals/LanguageFormModal.tsx","pages/Layout/Layout.tsx","pages/Translations/Translations.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["Button","title","type","additionalClasses","clickHandler","className","onClick","useAppDispatch","useDispatch","useAppSelector","useSelector","animalsSlice","createSlice","name","initialState","savedTasks","localStorage","getItem","JSON","parse","getInitialState","reducers","addItem","state","action","payload","addLanguageProperty","map","item","addTranslations","index","actions","animalsReducer","reducer","animalsName","errorInitialValue","showNameError","nameErrorMessage","showImageError","imageErrorMessage","AnimalFormModal","closeModal","uniqueAnimalSpecies","useState","nameInput","setNameInput","imgSrcInput","setImgSrcInput","speciesInput","setSpeciesInput","showErrorMessage","setShowErrorMessage","firstInputRef","useRef","modalRef","selectRef","animalData","animals","availableLanguages","languages","dispatch","useEffect","current","focus","animalNamesForAllLanguages","reduce","prev","curr","length","showSpeciesSelectInput","setShowSpeciesSelectInput","e","contains","target","closeModalWithClickOutside","ref","onSubmit","preventDefault","speciesValue","toLowerCase","value","en","includes","prevState","CSS","supports","id","uuid","imgSrc","species","submitHandler","htmlFor","style","marginBottom","placeholder","onChange","onFocus","gridTemplateColumns","gridColumnStart","gridColumnEnd","AnimalCard","imgUrl","src","alt","Home","isModalVisible","setIsModalVisible","activeFilter","setActiveFilter","activeLocale","locale","setItem","stringify","filter","arr","indexOf","textAlign","languagesSlice","savedLanguages","addLanguage","setLocale","languagesReducer","languagesName","LanguageFormModal","showError","message","languageCodeInput","setLanguageCodeInput","inputRef","addedLanguages","trim","processInput","Layout","isLanguageModalVisible","setIsLanguageModalVisible","languagesData","to","isActive","Translations","translations","setTranslations","arrIndex","languageKeys","Object","keys","languageValues","values","numberOfLanguages","rowSpan","newTranslationsState","newLanguageTranslations","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97f820bd.chunk.js","sourcesContent":["import React, { FC, ReactElement } from 'react';\nimport './Button.scss';\n\ntype ButtonProps = {\n  title: string | ReactElement;\n  type?: 'button' | 'submit' | 'reset';\n  additionalClasses?: string;\n  clickHandler?: () => void;\n}\n\nconst Button:FC<ButtonProps> = ({\n  title,\n  type,\n  additionalClasses,\n  clickHandler,\n}) => (\n  <button\n    type={type || 'button'}\n    className={`button ${additionalClasses}`}\n    onClick={clickHandler}\n  >\n    {title}\n  </button>\n);\n\nexport default Button;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ntype AnimalsState = {\n  id: string;\n  name: {\n    en: string;\n    [prop: string]: string;\n  }\n  imgSrc: string;\n  species: string;\n}\n\nconst getInitialState = (): AnimalsState[] => {\n  const savedTasks = localStorage.getItem('animal-filter');\n  if (!savedTasks) {\n    return [];\n  }\n  return JSON.parse(savedTasks);\n};\n\nconst animalsSlice = createSlice({\n  name: 'animals',\n  initialState: getInitialState(),\n  reducers: {\n    addItem: (state, action: PayloadAction<AnimalsState>) => ([...state, action.payload]),\n    addLanguageProperty: (state, action: PayloadAction<string>) => (\n      state.map((item) => ({ ...item, name: { ...item.name, [action.payload]: '' } }))\n    ),\n    addTranslations: (state, action: PayloadAction<{ [prop: string]: string, en: string }[]>) => (\n      state.map((item, index) => ({ ...item, name: action.payload[index] }))\n    ),\n  },\n});\n\nconst { addItem, addLanguageProperty, addTranslations } = animalsSlice.actions;\nconst animalsReducer = animalsSlice.reducer;\nconst animalsName = animalsSlice.name;\n\nexport {\n  animalsSlice, animalsReducer, animalsName, addItem, addLanguageProperty, addTranslations,\n};\n","import React, {\n  FC, useRef, MouseEvent, useState, FormEvent, useEffect,\n} from 'react';\nimport { uuid } from 'uuidv4';\nimport './Modal.scss';\nimport './FormModal.scss';\nimport { GrClose } from 'react-icons/gr';\nimport Button from '../Buttons/Button';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\nimport { addItem } from '../../redux/animalsSlice';\n\ntype AnimalFormModalProps = {\n  closeModal: () => void;\n  uniqueAnimalSpecies: string[];\n}\n\nconst errorInitialValue = {\n  showNameError: false,\n  nameErrorMessage: '',\n  showImageError: false,\n  imageErrorMessage: '',\n};\n\nconst AnimalFormModal:FC<AnimalFormModalProps> = ({ closeModal, uniqueAnimalSpecies }) => {\n  const [nameInput, setNameInput] = useState('');\n  const [imgSrcInput, setImgSrcInput] = useState('');\n  const [speciesInput, setSpeciesInput] = useState('');\n  const [showErrorMessage, setShowErrorMessage] = useState(errorInitialValue);\n\n  const firstInputRef = useRef<HTMLInputElement>(null);\n  const modalRef = useRef<HTMLDivElement>(null);\n  const selectRef = useRef<HTMLSelectElement>(null);\n\n  const animalData = useAppSelector((state) => state.animals);\n  const availableLanguages = useAppSelector((state) => state.languages.languages);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    firstInputRef.current?.focus();\n  }, []);\n\n  const animalNamesForAllLanguages = availableLanguages\n    .reduce((prev, curr) => ({ ...prev, [curr]: '' }), {});\n\n  const closeModalWithClickOutside = (e: MouseEvent) => {\n    if (modalRef.current!.contains(e.target as HTMLElement)) {\n      return;\n    }\n    closeModal();\n  };\n\n  const [showSpeciesSelectInput, setShowSpeciesSelectInput] = useState(() => uniqueAnimalSpecies.length > 0);\n\n  const submitHandler = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const speciesValue = speciesInput ? speciesInput.toLowerCase() : selectRef.current!.value;\n\n    if (!nameInput) {\n      setShowErrorMessage((prevState) => (\n        {\n          ...prevState,\n          showNameError: true,\n          nameErrorMessage: 'Please fill in this field!',\n        }\n      ));\n      return;\n    }\n\n    if (animalData.map((item) => item.name.en).includes(nameInput.toLowerCase())) {\n      setShowErrorMessage((prevState) => (\n        {\n          ...prevState,\n          showNameError: true,\n          nameErrorMessage: 'Animal with this name has already been added!',\n        }\n      ));\n      return;\n    }\n\n    if (!imgSrcInput) {\n      setShowErrorMessage((prevState) => (\n        {\n          ...prevState,\n          showImageError: true,\n          imageErrorMessage: 'Please fill in this field!',\n        }\n      ));\n      return;\n    }\n\n    if (!CSS.supports('background-image', `url(${imgSrcInput})`)) {\n      setShowErrorMessage((prevState) => (\n        {\n          ...prevState,\n          showImageError: true,\n          imageErrorMessage: 'This is not a valid image URL!',\n        }\n      ));\n      return;\n    }\n\n    dispatch(addItem(\n      {\n        id: uuid(),\n        name: { ...animalNamesForAllLanguages, en: nameInput.toLowerCase() },\n        imgSrc: imgSrcInput,\n        species: speciesValue,\n      },\n    ));\n    closeModal();\n  };\n\n  return (\n    <div className=\"modal\">\n      <div\n        className=\"modal__background\"\n        onClick={(e) => closeModalWithClickOutside(e)}\n      >\n        <div ref={modalRef} className=\"modal__window\">\n          <div className=\"modal__contents\">\n            <form className=\"form\" onSubmit={(e) => submitHandler(e)}>\n              <div className=\"form__header\">\n                <h2>Add animal</h2>\n                <Button title={<GrClose />} clickHandler={closeModal} additionalClasses=\"button--icon\" />\n              </div>\n              <div className=\"form__content\">\n                <div>\n                  <label htmlFor=\"animal-name\" className=\"form__form-field\" style={{ marginBottom: '3px' }}>\n                    <strong>Name:</strong>\n                    <input\n                      id=\"animal-name\"\n                      type=\"text\"\n                      className=\"form__text-input\"\n                      placeholder=\"Animal name\"\n                      ref={firstInputRef}\n                      value={nameInput}\n                      onChange={(e) => setNameInput(e.target.value)}\n                      onFocus={() => setShowErrorMessage((prevState) => (\n                        { ...prevState, showNameError: false }\n                      ))}\n                    />\n                  </label>\n                  <div className=\"form__error-message-wrapper\">\n                    <span\n                      className=\"form__error-message-text\"\n                    >\n                      {showErrorMessage.showNameError && showErrorMessage.nameErrorMessage}\n                    </span>\n                  </div>\n                </div>\n                <div>\n                  <label htmlFor=\"animal-source\" className=\"form__form-field\">\n                    <strong>Image source:</strong>\n                    <input\n                      id=\"animal-source\"\n                      type=\"text\"\n                      className=\"form__text-input\"\n                      placeholder=\"Animal image\"\n                      value={imgSrcInput}\n                      onChange={(e) => setImgSrcInput(e.target.value)}\n                      onFocus={() => setShowErrorMessage((prevState) => (\n                        { ...prevState, showImageError: false }\n                      ))}\n                    />\n                  </label>\n                  <div className=\"form__error-message-wrapper\">\n                    <span\n                      className=\"form__error-message-text\"\n                    >\n                      {showErrorMessage.showImageError && showErrorMessage.imageErrorMessage}\n                    </span>\n                  </div>\n                </div>\n                {\n                  showSpeciesSelectInput\n                    ? (\n                      <label\n                        htmlFor=\"animal-species\"\n                        className=\"form__form-field\"\n                        style={{ gridTemplateColumns: '1fr auto' }}\n                      >\n                        <strong style={{ gridColumnStart: 1, gridColumnEnd: 3 }}>Species:</strong>\n                        <select\n                          id=\"animal-species\"\n                          ref={selectRef}\n                          className=\"form__text-input form__select\"\n                          placeholder=\"Animal species\"\n                          value={speciesInput}\n                          onChange={(e) => setSpeciesInput(e.target.value)}\n                        >\n                          {\n                            uniqueAnimalSpecies.map((item) => (\n                              <option key={item} className=\"form__select-option\">{item}</option>\n                            ))\n                          }\n                        </select>\n                        <Button title=\"Add new\" clickHandler={() => setShowSpeciesSelectInput(false)} />\n                      </label>\n                    )\n                    : (\n                      <label htmlFor=\"animal-species-input\" className=\"form__form-field\">\n                        <strong>Species:</strong>\n                        <input\n                          id=\"animal-species-input\"\n                          type=\"text\"\n                          className=\"form__text-input\"\n                          placeholder=\"Animal species\"\n                          onChange={(e) => setSpeciesInput(e.target.value)}\n                        />\n                      </label>\n                    )\n                }\n              </div>\n              <div className=\"form__footer\">\n                <Button\n                  title=\"Cancel\"\n                  type=\"button\"\n                  additionalClasses=\"button--secondary\"\n                  clickHandler={() => closeModal()}\n                />\n                <Button title=\"Save\" type=\"submit\" />\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnimalFormModal;\n","import React, { FC } from 'react';\nimport './AnimalCard.scss';\n\ntype AnimalCardProps = {\n  name: string;\n  imgUrl: string;\n  species: string;\n}\n\nconst AnimalCard:FC<AnimalCardProps> = ({ name, imgUrl, species }) => (\n  <div className=\"animal-card\">\n    <img src={imgUrl} alt={name} className=\"animal-card__image\" />\n    <div className=\"animal-card__info-section\">\n      <h3 className=\"animal-card__name\">{name}</h3>\n      <span className=\"animal-card__species\">{species}</span>\n    </div>\n  </div>\n);\n\nexport default AnimalCard;\n","import React, { useEffect, useState } from 'react';\nimport './Home.scss';\nimport AnimalFormModal from '../../components/FormModals/AnimalFormModal';\nimport { useAppSelector } from '../../redux/hooks';\nimport Button from '../../components/Buttons/Button';\nimport AnimalCard from '../../components/AnimalCards/AnimalCard';\n\nconst Home = () => {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [activeFilter, setActiveFilter] = useState('all');\n  const animalData = useAppSelector((state) => state.animals);\n  const activeLocale = useAppSelector((state) => state.languages.locale);\n\n  useEffect(() => {\n    localStorage.setItem('animal-filter', JSON.stringify(animalData));\n  }, [animalData]);\n\n  const uniqueAnimalSpecies = animalData\n    .map((item) => item.species)\n    .filter((item, index, arr) => index === arr.indexOf(item));\n\n  const filteredAnimalData = () => {\n    if (activeFilter === 'all') {\n      return animalData;\n    }\n    return animalData.filter((item) => item.species === activeFilter);\n  };\n\n  const closeModal = () => {\n    setIsModalVisible(false);\n  };\n\n  return (\n    <section className=\"animals\">\n      <div className=\"animals__filter-section\">\n        {\n          ['all', ...uniqueAnimalSpecies]\n            .map((item) => (\n              <div\n                key={item}\n                className={activeFilter === item\n                  ? 'animals__filter-buttons animals__filter-buttons--active'\n                  : 'animals__filter-buttons'}\n                onClick={() => setActiveFilter(item)}\n              >\n                {item}\n              </div>\n            ))\n        }\n      </div>\n      <div className=\"animals__animal-card-grid\">\n        {\n          animalData.length > 0\n            ? filteredAnimalData().map(({\n              id, name, imgSrc, species,\n            }) => (\n              <AnimalCard key={id} name={name[activeLocale]} imgUrl={imgSrc} species={species} />\n            ))\n            : <h2 style={{ textAlign: 'center' }}>No animals added yet!</h2>\n        }\n      </div>\n      <div className=\"animals__add-animal-button-wrapper\">\n        <Button title=\"Add animal\" clickHandler={() => setIsModalVisible(true)} />\n      </div>\n      {isModalVisible && (\n      <AnimalFormModal\n        uniqueAnimalSpecies={uniqueAnimalSpecies}\n        closeModal={() => closeModal()}\n      />\n      )}\n    </section>\n  );\n};\n\nexport default Home;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ntype LanguageState = {\n  locale: string;\n  languages: string[]\n}\n\nconst getInitialState = (): LanguageState => {\n  const savedLanguages = localStorage.getItem('animal-filter-languages');\n  if (!savedLanguages) {\n    return ({ locale: 'en', languages: ['en'] });\n  }\n  return JSON.parse(savedLanguages);\n};\n\nconst languagesSlice = createSlice({\n  name: 'languages',\n  initialState: getInitialState(),\n  reducers: {\n    addLanguage: (state, action: PayloadAction<string>) => (\n      { ...state, languages: [...state.languages, action.payload] }\n    ),\n    setLocale: (state, action: PayloadAction<string>) => (\n      { ...state, locale: action.payload }\n    ),\n  },\n});\n\nconst { addLanguage, setLocale } = languagesSlice.actions;\nconst languagesReducer = languagesSlice.reducer;\nconst languagesName = languagesSlice.name;\n\nexport {\n  languagesSlice, languagesReducer, languagesName, addLanguage, setLocale,\n};\n","import React, {\n  FC, FormEvent, MouseEvent, useEffect, useRef, useState,\n} from 'react';\nimport { GrClose } from 'react-icons/gr';\nimport './Modal.scss';\nimport './FormModal.scss';\nimport Button from '../Buttons/Button';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\nimport { addLanguage } from '../../redux/languageSlice';\nimport { addLanguageProperty } from '../../redux/animalsSlice';\n\ntype LanguageFormModalProps = {\n  closeModal: () => void;\n}\n\nconst LanguageFormModal:FC<LanguageFormModalProps> = ({ closeModal }) => {\n  const [showErrorMessage, setShowErrorMessage] = useState({ showError: false, message: '' });\n  const [languageCodeInput, setLanguageCodeInput] = useState('');\n  const modalRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const addedLanguages = useAppSelector((state) => state.languages.languages);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const closeModalWithClickOutside = (e: MouseEvent) => {\n    if (modalRef.current!.contains(e.target as HTMLElement)) {\n      return;\n    }\n    closeModal();\n  };\n\n  const processInput = (value: string) => value.trim().toLowerCase();\n\n  const submitHandler = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const value = processInput(languageCodeInput);\n\n    if (addedLanguages.includes(value)) {\n      setShowErrorMessage({ showError: true, message: 'This language code has already been added!' });\n      return;\n    }\n\n    if (!languageCodeInput || value.length !== 2) {\n      setShowErrorMessage({ showError: true, message: 'Entered value is too short or too long!' });\n      return;\n    }\n\n    dispatch(addLanguage(value));\n    dispatch(addLanguageProperty(value));\n\n    closeModal();\n  };\n\n  return (\n    <div className=\"modal\">\n      <div\n        className=\"modal__background\"\n        onClick={(e) => closeModalWithClickOutside(e)}\n      >\n        <div ref={modalRef} className=\"modal__window\">\n          <div className=\"modal__contents\">\n            <form className=\"form\" onSubmit={(e) => submitHandler(e)}>\n              <div className=\"form__header\">\n                <h2>Add new language</h2>\n                <Button title={<GrClose />} clickHandler={closeModal} additionalClasses=\"button--icon\" />\n              </div>\n              <div>\n                <label\n                  htmlFor=\"language-code\"\n                  className=\"form__form-field\"\n                  style={{ marginBottom: '3px' }}\n                >\n                  <strong>Language code (2 letters):</strong>\n                  <input\n                    id=\"language-code\"\n                    type=\"text\"\n                    className=\"form__text-input\"\n                    placeholder={'Language code, e.g. \"EN\"'}\n                    ref={inputRef}\n                    value={languageCodeInput}\n                    onChange={(e) => setLanguageCodeInput(e.target.value)}\n                    onFocus={() => setShowErrorMessage((prevState) => (\n                      { ...prevState, showError: false }\n                    ))}\n                  />\n                </label>\n                <div className=\"form__error-message-wrapper\">\n                  <span\n                    className=\"form__error-message-text\"\n                  >\n                    {showErrorMessage.showError && showErrorMessage.message}\n                  </span>\n                </div>\n              </div>\n              <div className=\"form__footer\">\n                <Button\n                  title=\"Cancel\"\n                  type=\"button\"\n                  additionalClasses=\"button--secondary\"\n                  clickHandler={() => closeModal()}\n                />\n                <Button title=\"Save\" type=\"submit\" />\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LanguageFormModal;\n","import React, { useEffect, useState } from 'react';\nimport './Layout.scss';\nimport { MdLibraryAdd } from 'react-icons/md';\nimport { Link, NavLink, Outlet } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\nimport { setLocale } from '../../redux/languageSlice';\nimport Button from '../../components/Buttons/Button';\nimport LanguageFormModal from '../../components/FormModals/LanguageFormModal';\n\nconst Layout = () => {\n  const [isLanguageModalVisible, setIsLanguageModalVisible] = useState(false);\n  const languagesData = useAppSelector((state) => state.languages);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    localStorage.setItem('animal-filter-languages', JSON.stringify(languagesData));\n  }, [languagesData]);\n\n  const onSelect = (value: string) => {\n    dispatch(setLocale(value));\n  };\n\n  const closeModal = () => {\n    setIsLanguageModalVisible(false);\n  };\n\n  return (\n    <div>\n      <div className=\"page-container\">\n        <div className=\"header-wrapper\">\n          <div className=\"header\">\n            <nav>\n              <NavLink to=\"/\">\n                <img\n                  src=\"./assets/images/logo.png\"\n                  alt=\"animal-logo\"\n                  className=\"header__logo\"\n                />\n              </NavLink>\n            </nav>\n            <div className=\"header__navigation-wrapper\">\n              <nav className=\"header__navigation\">\n                <NavLink\n                  to=\"/\"\n                  className={({ isActive }) => (isActive\n                    ? 'header__navigation-link header__navigation-link--active'\n                    : 'header__navigation-link')}\n                >\n                  Home\n                </NavLink>\n                <NavLink\n                  to=\"/translations\"\n                  className={({ isActive }) => (isActive\n                    ? 'header__navigation-link header__navigation-link--active'\n                    : 'header__navigation-link')}\n                >\n                  Translations\n                </NavLink>\n              </nav>\n            </div>\n            <div className=\"header__language-selection\">\n              <select\n                className=\"header__select-language\"\n                onChange={(e) => onSelect(e.target.value)}\n              >\n                {languagesData\n                  .languages\n                  .map((item) => (\n                    <option\n                      key={item}\n                      className=\"header__language-option\"\n                    >\n                      {item}\n                    </option>\n                  ))}\n              </select>\n              <Button\n                title={<MdLibraryAdd />}\n                clickHandler={() => setIsLanguageModalVisible(true)}\n                additionalClasses=\"button--icon\"\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"content-wrapper\">\n          <Outlet />\n          {isLanguageModalVisible && <LanguageFormModal closeModal={() => closeModal()} />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React, { FormEvent, useState } from 'react';\nimport './Translations.scss';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\nimport Button from '../../components/Buttons/Button';\nimport { addTranslations } from '../../redux/animalsSlice';\n\nconst Translations = () => {\n  const animalData = useAppSelector((state) => state.animals);\n  const dispatch = useAppDispatch();\n\n  const initialState = animalData.map(({ name }) => (name));\n  const [translations, setTranslations] = useState(initialState);\n\n  const submitHandler = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    dispatch(addTranslations(translations));\n  };\n\n  if (animalData.length === 0) {\n    return <h2 style={{ textAlign: 'center' }}>No animals added yet!</h2>;\n  }\n\n  return (\n    <section>\n      <h2 className=\"translations-page-heading\">Animal name translations</h2>\n      <form onSubmit={(e) => submitHandler(e)}>\n        <table className=\"animal-translations\">\n          <thead>\n            <tr>\n              <th>Animal</th>\n              <th>Language</th>\n              <th>Animal Name</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              animalData.map(({ name }, arrIndex) => {\n                const languageKeys = Object.keys(name);\n                const languageValues = Object.values(name);\n                const numberOfLanguages = languageKeys.length;\n\n                return (\n                  languageValues.map((item, index) => (\n                    <tr key={item}>\n                      {!index && (\n                      <th\n                        rowSpan={numberOfLanguages}\n                        className=\"animal-translations__animal-name\"\n                      >\n                        {item}\n                      </th>\n                      )}\n                      <td className=\"animal-translations__language-code\">{languageKeys[index]}</td>\n                      {!index\n                        ? <td className=\"animal-translations__animal-name\">{item}</td>\n                        : (\n                          <td\n                            className=\"animal-translations__animal-name--input\"\n                          >\n                            <input\n                              type=\"text\"\n                              className=\"animal-translations__animal-name-input\"\n                              value={translations[arrIndex][languageKeys[index]]}\n                              onChange={(e) => {\n                                const newTranslationsState = [...translations];\n                                const newLanguageTranslations = { ...newTranslationsState[arrIndex] };\n                                newLanguageTranslations[languageKeys[index]] = e.target.value.toLowerCase();\n                                newTranslationsState[arrIndex] = newLanguageTranslations;\n                                setTranslations(newTranslationsState);\n                              }}\n                            />\n                          </td>\n                        )}\n                    </tr>\n                  ))\n                );\n              })\n             }\n          </tbody>\n        </table>\n        <div className=\"animal-translations__submit-button-wrapper\">\n          <Button type=\"submit\" title=\"Submit\" />\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default Translations;\n","import React from 'react';\nimport './App.scss';\nimport {\n  BrowserRouter, Routes, Route, HashRouter,\n} from 'react-router-dom';\nimport Home from './pages/Home/Home';\nimport Layout from './pages/Layout/Layout';\nimport Translations from './pages/Translations/Translations';\n\nconst App = () => (\n  // Use BrowserRouter for normal workflow\n  <HashRouter>\n    <Routes>\n      <Route path=\"/\" element={<Layout />}>\n        <Route index element={<Home />} />\n        <Route path=\"/translations\" element={<Translations />} />\n      </Route>\n    </Routes>\n  </HashRouter>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { animalsName, animalsReducer } from './animalsSlice';\nimport { languagesName, languagesReducer } from './languageSlice';\n\nexport const store = configureStore({\n  reducer: {\n    [animalsName]: animalsReducer,\n    [languagesName]: languagesReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}